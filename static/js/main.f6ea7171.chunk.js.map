{"version":3,"sources":["logo.svg","ImageRender.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","antIcon","LoadingOutlined","style","fontSize","spin","ImageRender","state","rawfile","base64","loading","getData","a","axios","request","url","props","children","method","responseType","then","data","setState","File","type","fileReader","FileReader","onload","fileLoadedEvent","target","result","readAsDataURL","this","indicator","spinning","className","src","Component","Meta","Card","TextArea","Input","App","visible","confirmLoading","text","ModalText","rules","required","rows","showModal","handleOk","setTimeout","handleCancel","console","log","basename","path","render","match","logo","alt","href","params","id","hoverable","width","cover","title","description","po","grp","styl","clr","backgroundColor","borderColor","icon","CheckCircleOutlined","size","danger","ghost","ExclamationCircleOutlined","onClick","centered","okText","okType","onOk","onCancel","React","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6ea7171.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.590b2c4d.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 50 }} spin />;\n\nclass ImageRender extends Component {\n\n    state = {\n        rawfile: [],\n        base64: \"\",\n        loading: true,\n    }\n\n    getData = async () => {\n    await axios.request({\n        url: `https://files.zohoexternal.com/public/workdrive-external/download/${this.props.children}`,\n        method: \"GET\",\n        responseType: \"blob\"\n      }).then(({data}) => {\n        this.setState ({\n        rawfile: new File([data],\"review.pdf\",{type: \"application/pdf\"}),\n    });\n});\n        var fileReader = new FileReader();\n        fileReader.onload = (fileLoadedEvent) => {\n            this.setState ({\n                base64: fileLoadedEvent.target.result + '#toolbar=0&navpanes=0&scrollbar=0',\n                loading: false,\n            });\n    };\n    fileReader.readAsDataURL(this.state.rawfile);\n}\n\ncomponentDidMount() {\n    this.getData();\n}\n\nrender() {\nreturn (\n    <Spin indicator={antIcon} spinning={this.state.loading}>\n    <embed className=\"file-frame\" src={this.state.base64} type=\"application/pdf\"></embed>\n    </Spin>\n)\n}\n}\n\nexport default ImageRender;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ImageRender from './ImageRender';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { Card, Button, Modal, Input } from 'antd';\nimport { CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\nclass App extends React.Component {\n\n  state = {\n    visible: false,\n    confirmLoading: false,\n    text: false,\n    ModalText: <div><br /><TextArea rules={[{ required: true }]} rows={4} /><br /><br /><h6>*Please note, you are allowed only 3 revisions.</h6></div>,\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = () => {\n    this.setState({\n      ModalText: 'Please wait...',\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  };\n\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n  const { visible, confirmLoading, ModalText } = this.state;\n  return (\n    <HashRouter basename=\"/\">\n      <Route\n        path=\"/app/:id/:ord/:po/:styl/:clr/:grp\"\n        render={({match}) => {\n            return (\n              <div className=\"App\">\n                <header className=\"App-header\">\n                  <div className=\"header-logo-container\">\n                    <img className=\"header-logo\" src={logo} alt=\"Alta Gracia Apparel\" />\n                  </div>\n                </header>\n                <div className=\"main-content\">\n                  <div className=\"sider\">\n                    <div className=\"card-container\">\n                    <a href={\"https://files.zohoexternal.com/public/workdrive-external/download/\" + match.params.id}>\n                      <Card\n                        hoverable\n                        style={{ width: \"fit-content\" }}\n                        cover={\n                          <div className=\"embed-container\">\n                          <ImageRender>{match.params.id}</ImageRender>\n                          </div>\n                        }>\n                        <Meta title={\"Click to Download\"} description={\"PO \" + match.params.po + \" - \" + match.params.grp} />\n                        </Card>\n                    </a>\n                    </div>\n                  <div className=\"sider-details\">\n                    <h2>\n                    Customer PO: {match.params.po}\n                    </h2>\n                    <h4>\n                    Style: {match.params.styl}\n                    <br />\n                    Color: {match.params.clr}\n                    <br />\n                    Graphic: {match.params.grp}\n                    </h4>\n                  </div>\n                  <div className=\"decision-area\">\n                    <div className=\"decision-buttons\">\n                  <Button  style={{backgroundColor:\"#90ee99\", borderColor:\"#90ee99\"}} type=\"primary\" icon={<CheckCircleOutlined />} size=\"large\">\n                    Approve\n                  </Button>\n                  <Button type=\"primary\" danger ghost icon={<ExclamationCircleOutlined />} size=\"large\" onClick={this.showModal}>\n                    Reject\n                  </Button>\n                  <Modal\n                    title=\"Please enter the reason for the rejection\"\n                    centered\n                    visible={visible}\n                    okText=\"Request Revision\"\n                    okType=\"danger\"\n                    onOk={this.handleOk}\n                    confirmLoading={confirmLoading}\n                    onCancel={this.handleCancel}\n                  >\n                    <p>{ModalText}</p>\n                  </Modal>\n                  </div>\n                  </div>\n                  </div>\n                  </div>\n              </div>\n    )}} \n    />\n  </HashRouter>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}